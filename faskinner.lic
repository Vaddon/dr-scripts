=begin
Elanthipedia: https://elanthipedia.play.net/Lich_script_repository#faskinner

Uses a frist aid-skinning trainer (e.g. crocodile, caracal, warcat, etc.) to train First Aid and Skinning to a set mindstate goal.

Option 1 - Add a command line argument (e.g. ;faskinner 3) to run the script 3 times and stop.  Will stop if mindstate goal reached for beforehand.
Option 2 - Run without command line argument to run the script to mindstate goal set in YAML.

YAML Settings include;
fa_skinning_trainer               Trainer noun should match exactly. (e.g. crocodile, caracal, warcat, etc.)}^
fa_skinning_trainer_container     Container where you store your trainer, if it's not worn.}}^
fa_skinning_priority              Options:  First Aid, Skinning, Both or leave blank for whichever happens first}}^
fa_skinning_mindstate_target      Mindstate threshold to stop training}}^
fa_skinning_knife                 If you don't wear a skinning knife, this is the bladed weapon you want to use to skin with.}}^
fa_skinning_knife_container       If you specify 'fa_skinning_knife:' then this is the container where that bladed weapon is stored.}}^
=end

custom_require.call(%w[common events drinfomon equipmanager common-arcana])

class FaSkinner
  def initialize
    @settings = get_settings
    @training_spells = @settings.crafting_training_spells
    @priority = @settings.fa_skinning_priority
    @trainer = @settings.fa_skinning_trainer
    @trainer_container = @settings.fa_skinning_trainer_container
    @knife = @settings.fa_skinning_knife
    @knife_container = @settings.fa_skinning_knife_container
    @target_mindstate = @settings.fa_skinning_mindstate_target
    @repeat_times = args.nil? || args.empty? ? nil : args.first.to_i
    EquipmentManager.new.empty_hands
    get_item(@trainer, @trainer_container) if @trainer
    get_item(@knife, @knife_container) if @knife

  def start
    if @repeat_times.nil?
      run_until_target_reached
    else
      @repeat_times.times do
        break if train_skills
      end
    end
    DRC.bput("put my #{@trainer} in my #{@trainer_container}", 'put your', 'Stow what')
    do_exit
  end

  def run_until_target_reached
    if @priority == 'First Aid' && DRSkill.getxp('First Aid') < @target_mindstate
      until DRSkill.getxp('First Aid') >= @target_mindstate
        train_skills
      end
      echo("Exiting because First Aid locked!")
    elsif @priority == 'Skinning' && DRSkill.getxp('Skinning') < @target_mindstate
      until DRSkill.getxp('Skinning') >= @target_mindstate
        train_skills
      end
      echo("Exiting because Skinning target reached!")
    elsif @priority == 'Both' || @priority == 'both'
      until DRSkill.getxp('First Aid') >= @target_mindstate && DRSkill.getxp('Skinning') >= @target_mindstate
        train_skills
      end
      echo("Exiting because First Aid AND Skinning target reached!")
    else
      until DRSkill.getxp('First Aid') >= @target_mindstate || DRSkill.getxp('Skinning') >= @target_mindstate
        train_skills
      end
      echo("Exiting because First Aid OR Skinning target reached!")
    end
  end

  def do_exit
    DRCI.put_away_item?(@trainer, @trainer_container) if @trainer
    DRCI.put_away_item?(@knife, @knife_container) if @knife
    magic_cleanup
    exit
  end

  def train_skills
    DRCA.crafting_magic_routine(@settings)
    case DRC.bput("skin my #{@trainer}", 'skillfully peel back', 'already been sliced', 'You must be holding', 'The leather looks frayed', 'need to have a bladed instrument') # Updated messaging
    when /You must be holding/
      get_item(@trainer, @trainer_container)
    when /The leather looks frayed/
      DRC.message("No Charges!  Try again later.")
      do_exit
    when /need to have a bladed instrument/
      DRC.message("You need to either wear a skinning knife or hold a bladed weapon")
      do_exit
    end

    DRCA.crafting_magic_routine(@settings)
    case DRC.bput("repair my #{@trainer}", 'in need of repair', 'You are already holding', 'quickly stitch', 'With some needle and thread', 'You must be holding', 'The leather looks frayed') # Updated messaging
    when /You must be holding/
      get_item(@trainer, @trainer_container)
    when /The leather looks frayed/
      DRC.message("No Charges!  Try again later.")
      do_exit
    end
    return true if DRSkill.getxp('First Aid') >= @target_mindstate && DRSkill.getxp('Skinning') >= @target_mindstate
    false
  end

  def magic_cleanup
    return if @training_spells.empty?

    DRC.bput('release spell', 'You let your concentration lapse', "You aren't preparing a spell")
    DRC.bput('release mana', 'You release all', "You aren't harnessing any mana")
    # Do not release symbiosis as it may release the symbiosis research instead of a prepared symbioisis cast.
  end

  def get_item(item, container = nil)
    unless DRCI.get_item_if_not_held?(item, container)
      DRC.message("Could not get '#{item}'!")
      do_exit
    end
  end
end

before_dying do
  EquipmentManager.new.empty_hands
end

FaSkinner.new
